package inspect

import (
	"go/ast"
	"go/token"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNew(t *testing.T) {
	assert := assert.New(t)

	var base MockInspector
	var fset MockFiler

	i := New(&base, &fset)

	assert.Equal(&base, i.base)
	assert.Equal(&fset, i.fset)
}

func TestFilter_Preorder(t *testing.T) {
	t.Run("with file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var result []ast.Node
		i.Preorder([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node) {
			result = append(result, n)
		})

		assert.Equal([]ast.Node{
			&file,
			&funcDecl,
		}, result)
	})

	t.Run("with test file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo_test.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var result []ast.Node
		i.Preorder([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node) {
			result = append(result, n)
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, result)
	})

	t.Run("with generated file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		file := ast.File{
			Comments: []*ast.CommentGroup{
				{
					List: []*ast.Comment{
						{
							Text: "// Code generated by a generator; DO NOT EDIT.",
						},
					},
				},
			},
		}
		var funcDecl ast.FuncDecl

		var result []ast.Node
		i.Preorder([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node) {
			result = append(result, n)
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, result)
	})

	t.Run("without file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var funcDecl ast.FuncDecl

		var result []ast.Node
		i.Preorder([]ast.Node{
			&funcDecl,
		}, func(n ast.Node) {
			result = append(result, n)
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, result)
	})
}

func TestFilter_Nodes(t *testing.T) {
	t.Run("with file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.Nodes([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&file,
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
			&file,
		}, pulls)
	})

	t.Run("with test file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo_test.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.Nodes([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})

	t.Run("with generated file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		file := ast.File{
			Comments: []*ast.CommentGroup{
				{
					List: []*ast.Comment{
						{
							Text: "// Code generated by a generator; DO NOT EDIT.",
						},
					},
				},
			},
		}
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.Nodes([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})

	t.Run("without file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.Nodes([]ast.Node{
			&funcDecl,
		}, func(n ast.Node, push bool) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}

			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})
}

func TestFilter_WithStack(t *testing.T) {
	t.Run("with file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.WithStack([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool, stack []ast.Node) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&file,
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
			&file,
		}, pulls)
	})

	t.Run("with test file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo_test.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var file ast.File
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.WithStack([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool, stack []ast.Node) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})

	t.Run("with generated file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		file := ast.File{
			Comments: []*ast.CommentGroup{
				{
					List: []*ast.Comment{
						{
							Text: "// Code generated by a generator; DO NOT EDIT.",
						},
					},
				},
			},
		}
		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.WithStack([]ast.Node{
			&file,
			&funcDecl,
		}, func(n ast.Node, push bool, stack []ast.Node) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}
			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})

	t.Run("without file", func(t *testing.T) {
		assert := assert.New(t)

		fs := token.NewFileSet()
		fs.AddFile("foo.go", 1, 1)

		var base MockInspector
		fset := MockFiler{
			file: fs.File(1),
		}

		i := Filter{
			base: &base,
			fset: &fset,
		}

		var funcDecl ast.FuncDecl

		var pushs, pulls []ast.Node
		i.WithStack([]ast.Node{
			&funcDecl,
		}, func(n ast.Node, push bool, stack []ast.Node) bool {
			if push {
				pushs = append(pushs, n)
			} else {
				pulls = append(pulls, n)
			}

			return true
		})

		assert.Equal([]ast.Node{
			&funcDecl,
		}, pushs)
		assert.Equal([]ast.Node{
			&funcDecl,
		}, pulls)
	})
}

type MockInspector struct {
}

func (m *MockInspector) Preorder(types []ast.Node, f func(n ast.Node)) {
	for _, n := range types {
		f(n)
	}
}

func (m *MockInspector) Nodes(types []ast.Node, f func(n ast.Node, push bool) (prune bool)) {
	for _, n := range types {
		if f(n, true) {
			defer f(n, false)
		}
	}
}

func (m *MockInspector) WithStack(types []ast.Node, f func(n ast.Node, push bool, stack []ast.Node) (prune bool)) {
	for i, n := range types {
		if f(n, true, types[:i]) {
			defer f(n, false, types[:i])
		}
	}
}

type MockFiler struct {
	file *token.File
}

func (m *MockFiler) File(p token.Pos) (f *token.File) {
	return m.file
}
